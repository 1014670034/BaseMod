diff -ru ../../../_lib/decompiled/com/megacrit/cardcrawl/map/MapGenerator.java com/megacrit/cardcrawl/map/MapGenerator.java
--- ../../../_lib/decompiled/com/megacrit/cardcrawl/map/MapGenerator.java	2018-02-08 20:13:23.981675900 -0800
+++ com/megacrit/cardcrawl/map/MapGenerator.java	2018-02-01 19:41:29.043025200 -0800
@@ -3,28 +3,29 @@
  */
 package com.megacrit.cardcrawl.map;
 
-import com.megacrit.cardcrawl.map.EdgeComparator;
-import com.megacrit.cardcrawl.map.MapEdge;
-import com.megacrit.cardcrawl.map.MapRoomNode;
+import basemod.BaseMod;
 import com.megacrit.cardcrawl.random.Random;
-import java.util.ArrayList;
-import java.util.Collections;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import java.util.ArrayList;
+
 public class MapGenerator {
     private static final Logger logger = LogManager.getLogger(MapGenerator.class.getName());
 
     public static ArrayList<ArrayList<MapRoomNode>> generateDungeon(int height, int width, int pathDensity, Random rng) {
         ArrayList<ArrayList<MapRoomNode>> map = MapGenerator.createNodes(height, width);
-        map = MapGenerator.createPaths(map, pathDensity, rng);
+        
+        // BaseMod modification
+        map = MapGenerator.createPaths(map, (int)(pathDensity*BaseMod.mapPathDensityMultiplier), rng);
+        
         map = MapGenerator.filterRedundantEdgesFromRow(map);
         return map;
     }
 
     private static ArrayList<ArrayList<MapRoomNode>> filterRedundantEdgesFromRow(ArrayList<ArrayList<MapRoomNode>> map) {
-        ArrayList<MapEdge> existingEdges = new ArrayList<MapEdge>();
-        ArrayList<MapEdge> deleteList = new ArrayList<MapEdge>();
+        ArrayList<MapEdge> existingEdges = new ArrayList<>();
+        ArrayList<MapEdge> deleteList = new ArrayList<>();
         for (MapRoomNode node : map.get(0)) {
             if (!node.hasEdges()) continue;
             for (MapEdge edge : node.getEdges()) {
@@ -43,9 +44,9 @@
     }
 
     private static ArrayList<ArrayList<MapRoomNode>> createNodes(int height, int width) {
-        ArrayList<ArrayList<MapRoomNode>> nodes = new ArrayList<ArrayList<MapRoomNode>>();
+        ArrayList<ArrayList<MapRoomNode>> nodes = new ArrayList<>();
         for (int y = 0; y < height; ++y) {
-            ArrayList<MapRoomNode> row = new ArrayList<MapRoomNode>();
+            ArrayList<MapRoomNode> row = new ArrayList<>();
             for (int x = 0; x < width; ++x) {
                 row.add(new MapRoomNode(x, y));
             }
@@ -72,13 +73,13 @@
     }
 
     private static MapEdge getMaxEdge(ArrayList<MapEdge> edges) {
-        Collections.sort(edges, new EdgeComparator());
+        edges.sort(new EdgeComparator());
         assert (!edges.isEmpty());
         return edges.get(edges.size() - 1);
     }
 
     private static MapEdge getMinEdge(ArrayList<MapEdge> edges) {
-        Collections.sort(edges, new EdgeComparator());
+        edges.sort(new EdgeComparator());
         assert (!edges.isEmpty());
         return edges.get(0);
     }
@@ -134,7 +135,7 @@
         if (edge.dstY + 1 >= nodes.size()) {
             MapEdge newEdge = new MapEdge(edge.dstX, edge.dstY, currentNode.offsetX, currentNode.offsetY, 3, edge.dstY + 2, 0.0f, 0.0f, true);
             currentNode.addEdge(newEdge);
-            Collections.sort(currentNode.getEdges(), new EdgeComparator());
+            currentNode.getEdges().sort(new EdgeComparator());
             return nodes;
         }
         int row_width = nodes.get(edge.dstY).size();
@@ -180,9 +181,7 @@
                         }
                     }
                     targetNodeCandidate = MapGenerator.getNode(newEdgeX, newEdgeY, nodes);
-                    continue;
                 }
-                if (ancestor_gap < max_ancestor_gap) continue;
             }
         }
         if (edge.dstX != 0 && (left_node = nodes.get(edge.dstY).get(edge.dstX - 1)).hasEdges()) {
@@ -200,7 +199,7 @@
         targetNodeCandidate = MapGenerator.getNode(newEdgeX, newEdgeY, nodes);
         MapEdge newEdge = new MapEdge(edge.dstX, edge.dstY, currentNode.offsetX, currentNode.offsetY, newEdgeX, newEdgeY, targetNodeCandidate.offsetX, targetNodeCandidate.offsetY, false);
         currentNode.addEdge(newEdge);
-        Collections.sort(currentNode.getEdges(), new EdgeComparator());
+        currentNode.getEdges().sort(new EdgeComparator());
         targetNodeCandidate.addParent(currentNode);
         return MapGenerator._createPaths(nodes, newEdge, rng);
     }
@@ -240,7 +239,7 @@
                     if (edge.dstX <= node.x) continue;
                     right = "/";
                 }
-                str.append(left).append((String)mid).append(right);
+                str.append(left).append(mid).append(right);
             }
             str.append("\n").append(row_num).append(" ");
             str.append(MapGenerator.paddingGenerator(left_padding_size - String.valueOf(row_num).length()));
diff -ru ../../../_lib/decompiled/com/megacrit/cardcrawl/monsters/MonsterGroup.java com/megacrit/cardcrawl/monsters/MonsterGroup.java
--- ../../../_lib/decompiled/com/megacrit/cardcrawl/monsters/MonsterGroup.java	2018-02-08 20:13:24.265449300 -0800
+++ com/megacrit/cardcrawl/monsters/MonsterGroup.java	2018-02-03 00:24:09.041768100 -0800
@@ -3,31 +3,28 @@
  */
 package com.megacrit.cardcrawl.monsters;
 
+import basemod.BaseMod;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.math.MathUtils;
-import com.megacrit.cardcrawl.actions.AbstractGameAction;
-import com.megacrit.cardcrawl.actions.GameActionManager;
 import com.megacrit.cardcrawl.actions.IntentFlashAction;
 import com.megacrit.cardcrawl.actions.common.ShowMoveNameAction;
 import com.megacrit.cardcrawl.actions.utility.WaitAction;
-import com.megacrit.cardcrawl.characters.AbstractPlayer;
 import com.megacrit.cardcrawl.core.CardCrawlGame;
 import com.megacrit.cardcrawl.core.Settings;
 import com.megacrit.cardcrawl.dungeons.AbstractDungeon;
 import com.megacrit.cardcrawl.dungeons.TheCity;
-import com.megacrit.cardcrawl.helpers.Hitbox;
 import com.megacrit.cardcrawl.helpers.TipTracker;
 import com.megacrit.cardcrawl.monsters.AbstractMonster;
 import com.megacrit.cardcrawl.powers.AbstractPower;
 import java.util.ArrayList;
 import java.util.Collections;
-import java.util.HashMap;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class MonsterGroup {
     private static final Logger logger = LogManager.getLogger(MonsterGroup.class.getName());
-    public ArrayList<AbstractMonster> monsters = new ArrayList();
+    public ArrayList<AbstractMonster> monsters = new ArrayList<>();
     public AbstractMonster hoveredMonster = null;
     private static final float WAIT_AFTER_MONSTERS_TIME = 1.5f;
 
@@ -74,6 +71,7 @@
         }
     }
 
+    @SuppressWarnings("BooleanMethodIsAlwaysInverted")
     public boolean areMonstersDead() {
         for (AbstractMonster m : this.monsters) {
             if (m.isDead || m.escaped) continue;
@@ -116,14 +114,17 @@
                 AbstractDungeon.actionManager.addToBottom(new ShowMoveNameAction(m));
                 AbstractDungeon.actionManager.addToBottom(new IntentFlashAction(m));
             }
-            if (!(TipTracker.tips.get("INTENT_TIP").booleanValue() || AbstractDungeon.player.currentBlock != 0 || m.intent != AbstractMonster.Intent.ATTACK && m.intent != AbstractMonster.Intent.ATTACK_DEBUFF && m.intent != AbstractMonster.Intent.ATTACK_BUFF && m.intent != AbstractMonster.Intent.ATTACK_DEFEND)) {
+            if (!(TipTracker.tips.get("INTENT_TIP")|| AbstractDungeon.player.currentBlock != 0 || m.intent != AbstractMonster.Intent.ATTACK && m.intent != AbstractMonster.Intent.ATTACK_DEBUFF && m.intent != AbstractMonster.Intent.ATTACK_BUFF && m.intent != AbstractMonster.Intent.ATTACK_DEFEND)) {
                 if (AbstractDungeon.floorNum <= 5) {
                     ++TipTracker.blockCounter;
                 } else {
                     TipTracker.neverShowAgain("INTENT_TIP");
                 }
             }
-            m.takeTurn();
+
+            if (BaseMod.publishPreMonsterTurn(m)) {
+                m.takeTurn();
+            }
         }
         if (!Settings.isDebug) {
             AbstractDungeon.actionManager.addToBottom(new WaitAction(1.5f));
@@ -151,10 +152,8 @@
             if (!m.isEscaping) continue;
             return true;
         }
-        if (CardCrawlGame.dungeon instanceof TheCity) {
-            return true;
-        }
-        return false;
+
+        return (CardCrawlGame.dungeon instanceof TheCity);
     }
 
     public AbstractMonster getRandomMonster() {
@@ -171,7 +170,7 @@
         }
         if (exception == null) {
             if (aliveOnly) {
-                ArrayList<AbstractMonster> tmp = new ArrayList<AbstractMonster>();
+                ArrayList<AbstractMonster> tmp = new ArrayList<>();
                 for (AbstractMonster m : this.monsters) {
                     if (m.halfDead || m.isDying || m.isEscaping) continue;
                     tmp.add(m);
@@ -179,7 +178,7 @@
                 if (tmp.size() <= 0) {
                     return null;
                 }
-                return (AbstractMonster)tmp.get(MathUtils.random(0, tmp.size() - 1));
+                return tmp.get(MathUtils.random(0, tmp.size() - 1));
             }
             return this.monsters.get(MathUtils.random(0, this.monsters.size() - 1));
         }
@@ -187,7 +186,7 @@
             return this.monsters.get(0);
         }
         if (aliveOnly) {
-            ArrayList<AbstractMonster> tmp = new ArrayList<AbstractMonster>();
+            ArrayList<AbstractMonster> tmp = new ArrayList<>();
             for (AbstractMonster m : this.monsters) {
                 if (m.halfDead || m.isDying || m.isEscaping || exception.equals(m)) continue;
                 tmp.add(m);
@@ -195,14 +194,14 @@
             if (tmp.size() == 0) {
                 return null;
             }
-            return (AbstractMonster)tmp.get(MathUtils.random(0, tmp.size() - 1));
+            return tmp.get(MathUtils.random(0, tmp.size() - 1));
         }
-        ArrayList<AbstractMonster> tmp = new ArrayList<AbstractMonster>();
+        ArrayList<AbstractMonster> tmp = new ArrayList<>();
         for (AbstractMonster m : this.monsters) {
             if (exception.equals(m)) continue;
             tmp.add(m);
         }
-        return (AbstractMonster)tmp.get(MathUtils.random(0, tmp.size() - 1));
+        return tmp.get(MathUtils.random(0, tmp.size() - 1));
     }
 
     public void update() {
@@ -279,11 +278,10 @@
     }
 
     public ArrayList<String> getMonsterNames() {
-        ArrayList<String> arr = new ArrayList<String>();
+        ArrayList<String> arr = new ArrayList<>();
         for (AbstractMonster m : this.monsters) {
             arr.add(m.id);
         }
         return arr;
     }
 }
-
diff -ru ../../../_lib/decompiled/com/megacrit/cardcrawl/powers/IntangiblePower.java com/megacrit/cardcrawl/powers/IntangiblePower.java
--- ../../../_lib/decompiled/com/megacrit/cardcrawl/powers/IntangiblePower.java	2018-02-08 20:13:26.086697800 -0800
+++ com/megacrit/cardcrawl/powers/IntangiblePower.java	2018-02-01 19:41:29.051562700 -0800
@@ -3,19 +3,15 @@
  */
 package com.megacrit.cardcrawl.powers;
 
-import com.badlogic.gdx.graphics.Texture;
-import com.megacrit.cardcrawl.actions.AbstractGameAction;
-import com.megacrit.cardcrawl.actions.GameActionManager;
 import com.megacrit.cardcrawl.actions.common.ReducePowerAction;
 import com.megacrit.cardcrawl.actions.common.RemoveSpecificPowerAction;
 import com.megacrit.cardcrawl.cards.DamageInfo;
+import com.megacrit.cardcrawl.characters.AbstractPlayer;
 import com.megacrit.cardcrawl.core.AbstractCreature;
 import com.megacrit.cardcrawl.core.CardCrawlGame;
 import com.megacrit.cardcrawl.dungeons.AbstractDungeon;
 import com.megacrit.cardcrawl.helpers.ImageMaster;
-import com.megacrit.cardcrawl.localization.LocalizedStrings;
 import com.megacrit.cardcrawl.localization.PowerStrings;
-import com.megacrit.cardcrawl.powers.AbstractPower;
 
 public class IntangiblePower
 extends AbstractPower {
@@ -36,6 +32,18 @@
         this.justApplied = true;
     }
 
+    // BaseMod modification
+    @Override
+    public void atEndOfRound() {
+        if (owner instanceof AbstractPlayer) {
+            AbstractDungeon.actionManager.addToBottom(new ReducePowerAction(owner, owner, "Intangible", 1));
+            
+            if (amount == 0) {
+                AbstractDungeon.actionManager.addToBottom(new RemoveSpecificPowerAction(owner, owner, "Intangible"));
+            }
+        }
+    }
+    
     @Override
     public float atDamageReceive(float damage, DamageInfo.DamageType type) {
         if (damage > 0.0f) {
diff -ru ../../../_lib/decompiled/com/megacrit/cardcrawl/ui/buttons/CancelButton.java com/megacrit/cardcrawl/ui/buttons/CancelButton.java
--- ../../../_lib/decompiled/com/megacrit/cardcrawl/ui/buttons/CancelButton.java	2018-02-08 20:13:30.163113200 -0800
+++ com/megacrit/cardcrawl/ui/buttons/CancelButton.java	2018-02-01 19:41:29.054065100 -0800
@@ -3,14 +3,11 @@
  */
 package com.megacrit.cardcrawl.ui.buttons;
 
+import basemod.BaseMod;
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.math.MathUtils;
-import com.megacrit.cardcrawl.audio.SoundMaster;
 import com.megacrit.cardcrawl.core.CardCrawlGame;
 import com.megacrit.cardcrawl.core.Settings;
 import com.megacrit.cardcrawl.dungeons.AbstractDungeon;
@@ -18,16 +15,10 @@
 import com.megacrit.cardcrawl.helpers.Hitbox;
 import com.megacrit.cardcrawl.helpers.ImageMaster;
 import com.megacrit.cardcrawl.helpers.InputHelper;
-import com.megacrit.cardcrawl.localization.LocalizedStrings;
 import com.megacrit.cardcrawl.localization.UIStrings;
-import com.megacrit.cardcrawl.rewards.chests.AbstractChest;
-import com.megacrit.cardcrawl.rooms.CampfireUI;
 import com.megacrit.cardcrawl.rooms.RestRoom;
 import com.megacrit.cardcrawl.rooms.TreasureRoomBoss;
 import com.megacrit.cardcrawl.screens.mainMenu.MainMenuScreen;
-import com.megacrit.cardcrawl.screens.select.GridCardSelectScreen;
-import com.megacrit.cardcrawl.screens.stats.StatsScreen;
-import com.megacrit.cardcrawl.screens.trial.TrialScreen;
 
 public class CancelButton {
     private static final UIStrings uiStrings = CardCrawlGame.languagePack.getUIString("Cancel Button");
@@ -95,6 +86,14 @@
                         this.hide();
                         return;
                     }
+                    
+                    // BaseMod modification
+                    if (BaseMod.modSettingsUp) {
+                        BaseMod.modSettingsUp = false;
+                        hide();
+                        return;
+                    }
+                    
                     if (this.buttonText.equals(TEXT[0])) {
                         return;
                     }
diff -ru ../../../_lib/decompiled/com/megacrit/cardcrawl/ui/buttons/EndTurnButton.java com/megacrit/cardcrawl/ui/buttons/EndTurnButton.java
--- ../../../_lib/decompiled/com/megacrit/cardcrawl/ui/buttons/EndTurnButton.java	2018-02-08 20:13:30.322266400 -0800
+++ com/megacrit/cardcrawl/ui/buttons/EndTurnButton.java	2018-02-08 20:21:33.369300000 -0800
@@ -3,32 +3,22 @@
  */
 package com.megacrit.cardcrawl.ui.buttons;
 
+import basemod.DevConsole;
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.Graphics;
-import com.badlogic.gdx.Input;
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.math.MathUtils;
-import com.megacrit.cardcrawl.audio.SoundMaster;
 import com.megacrit.cardcrawl.cards.AbstractCard;
-import com.megacrit.cardcrawl.cards.CardGroup;
-import com.megacrit.cardcrawl.characters.AbstractPlayer;
 import com.megacrit.cardcrawl.core.CardCrawlGame;
 import com.megacrit.cardcrawl.core.Settings;
 import com.megacrit.cardcrawl.dungeons.AbstractDungeon;
-import com.megacrit.cardcrawl.helpers.FontHelper;
-import com.megacrit.cardcrawl.helpers.Hitbox;
-import com.megacrit.cardcrawl.helpers.ImageMaster;
-import com.megacrit.cardcrawl.helpers.InputHelper;
-import com.megacrit.cardcrawl.helpers.ShaderHelper;
-import com.megacrit.cardcrawl.helpers.TipHelper;
-import com.megacrit.cardcrawl.localization.LocalizedStrings;
+import com.megacrit.cardcrawl.helpers.*;
 import com.megacrit.cardcrawl.localization.TutorialStrings;
 import com.megacrit.cardcrawl.localization.UIStrings;
 import com.megacrit.cardcrawl.vfx.AbstractGameEffect;
 import com.megacrit.cardcrawl.vfx.EndTurnGlowEffect;
+
 import java.util.ArrayList;
 import java.util.Iterator;
 
@@ -51,8 +41,7 @@
     private boolean isHidden = true;
     public boolean enabled = false;
     private boolean isDisabled = false;
-    private Color textColor;
-    private ArrayList<EndTurnGlowEffect> glowList = new ArrayList();
+    private ArrayList<EndTurnGlowEffect> glowList = new ArrayList<>();
     private static final float GLOW_INTERVAL = 1.2f;
     private float glowTimer = 0.0f;
     public boolean isGlowing = false;
@@ -69,10 +58,7 @@
         }
         this.hitbox.move(this.current_x, this.current_y);
         if (this.enabled) {
-            this.isDisabled = false;
-            if (AbstractDungeon.isScreenUp || AbstractDungeon.player.isDraggingCard || AbstractDungeon.player.inSingleTargetMode) {
-                this.isDisabled = true;
-            }
+            this.isDisabled = AbstractDungeon.isScreenUp || AbstractDungeon.player.isDraggingCard || AbstractDungeon.player.inSingleTargetMode;
             if (AbstractDungeon.player.hoveredCard == null) {
                 this.hitbox.update();
             }
@@ -91,7 +77,9 @@
                 }
             }
         }
-        if (this.hitbox.clicked || Gdx.input.isKeyJustPressed(33) && !this.isDisabled && this.enabled) {
+        
+        // BaseMod modification
+        if (this.hitbox.clicked || (!DevConsole.visible && Gdx.input.isKeyJustPressed(33)) && !this.isDisabled && this.enabled) {
             this.hitbox.clicked = false;
             if (!this.isDisabled && !AbstractDungeon.isScreenUp) {
                 this.disable(true);
@@ -177,10 +165,11 @@
     public void render(SpriteBatch sb) {
         if (!Settings.hideEndTurn) {
             float tmpY = this.current_y;
+            Color textColor;
             if (this.isDisabled || !this.enabled) {
-                this.textColor = this.label.equals(ENEMY_TURN_MSG) ? Settings.CREAM_COLOR : Color.LIGHT_GRAY;
+                textColor = this.label.equals(ENEMY_TURN_MSG) ? Settings.CREAM_COLOR : Color.LIGHT_GRAY;
             } else {
-                this.textColor = this.hitbox.hovered ? (this.isWarning ? Settings.RED_TEXT_COLOR : Color.CYAN) : (this.isGlowing ? Settings.GOLD_COLOR : Settings.CREAM_COLOR);
+                textColor = this.hitbox.hovered ? (this.isWarning ? Settings.RED_TEXT_COLOR : Color.CYAN) : (this.isGlowing ? Settings.GOLD_COLOR : Settings.CREAM_COLOR);
                 if (this.hitbox.hovered && !AbstractDungeon.isScreenUp) {
                     TipHelper.renderGenericTip(this.current_x - 90.0f * Settings.scale, this.current_y + 300.0f * Settings.scale, LABEL[0] + " (E)", MSG[0] + AbstractDungeon.player.gameHandSize + MSG[1]);
                 }
@@ -214,7 +203,7 @@
                 sb.draw(buttonImg, this.current_x - 128.0f, tmpY - 128.0f, 128.0f, 128.0f, 256.0f, 256.0f, Settings.scale, Settings.scale, 0.0f, 0, 0, 256, 256, false, false);
                 sb.setBlendFunction(770, 771);
             }
-            FontHelper.renderFontCentered(sb, FontHelper.panelEndTurnFont, this.label, this.current_x - 0.0f * Settings.scale, tmpY - 3.0f * Settings.scale, this.textColor);
+            FontHelper.renderFontCentered(sb, FontHelper.panelEndTurnFont, this.label, this.current_x - 0.0f * Settings.scale, tmpY - 3.0f * Settings.scale, textColor);
             if (!this.isHidden) {
                 this.hitbox.render(sb);
             }
diff -ru ../../../_lib/decompiled/com/megacrit/cardcrawl/ui/campfire/AbstractCampfireOption.java com/megacrit/cardcrawl/ui/campfire/AbstractCampfireOption.java
--- ../../../_lib/decompiled/com/megacrit/cardcrawl/ui/campfire/AbstractCampfireOption.java	2018-02-08 20:13:30.433873200 -0800
+++ com/megacrit/cardcrawl/ui/campfire/AbstractCampfireOption.java	2018-02-01 19:41:29.060583000 -0800
@@ -3,11 +3,10 @@
  */
 package com.megacrit.cardcrawl.ui.campfire;
 
+import basemod.BaseMod;
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
-import com.megacrit.cardcrawl.audio.SoundMaster;
 import com.megacrit.cardcrawl.core.CardCrawlGame;
 import com.megacrit.cardcrawl.core.Settings;
 import com.megacrit.cardcrawl.dungeons.AbstractDungeon;
@@ -15,7 +14,6 @@
 import com.megacrit.cardcrawl.helpers.Hitbox;
 import com.megacrit.cardcrawl.helpers.InputHelper;
 import com.megacrit.cardcrawl.helpers.MathHelper;
-import com.megacrit.cardcrawl.rooms.CampfireUI;
 import com.megacrit.cardcrawl.rooms.RestRoom;
 
 public abstract class AbstractCampfireOption {
@@ -58,7 +56,11 @@
         if (this.hb.clicked) {
             this.hb.clicked = false;
             this.useOption();
-            ((RestRoom)AbstractDungeon.getCurrRoom()).campfireUI.somethingSelected = true;
+            
+            // BaseMod modification
+            if (BaseMod.publishPostCampfire()) {
+                ((RestRoom)AbstractDungeon.getCurrRoom()).campfireUI.somethingSelected = true;
+            }
         }
     }
 
diff -ru ../../../_lib/decompiled/com/megacrit/cardcrawl/ui/panels/DiscardPilePanel.java com/megacrit/cardcrawl/ui/panels/DiscardPilePanel.java
--- ../../../_lib/decompiled/com/megacrit/cardcrawl/ui/panels/DiscardPilePanel.java	2018-02-08 20:13:30.518955100 -0800
+++ com/megacrit/cardcrawl/ui/panels/DiscardPilePanel.java	2018-02-08 20:22:04.035360200 -0800
@@ -3,20 +3,14 @@
  */
 package com.megacrit.cardcrawl.ui.panels;
 
+import basemod.DevConsole;
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.Graphics;
-import com.badlogic.gdx.Input;
 import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.GlyphLayout;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.math.MathUtils;
-import com.megacrit.cardcrawl.audio.SoundMaster;
-import com.megacrit.cardcrawl.cards.CardGroup;
 import com.megacrit.cardcrawl.characters.AbstractPlayer;
 import com.megacrit.cardcrawl.core.CardCrawlGame;
-import com.megacrit.cardcrawl.core.OverlayMenu;
 import com.megacrit.cardcrawl.core.Settings;
 import com.megacrit.cardcrawl.dungeons.AbstractDungeon;
 import com.megacrit.cardcrawl.helpers.FontHelper;
@@ -24,10 +18,8 @@
 import com.megacrit.cardcrawl.helpers.ImageMaster;
 import com.megacrit.cardcrawl.helpers.InputHelper;
 import com.megacrit.cardcrawl.helpers.TipHelper;
-import com.megacrit.cardcrawl.localization.LocalizedStrings;
 import com.megacrit.cardcrawl.localization.TutorialStrings;
 import com.megacrit.cardcrawl.localization.UIStrings;
-import com.megacrit.cardcrawl.screens.DiscardPileViewScreen;
 import com.megacrit.cardcrawl.ui.panels.AbstractPanel;
 import com.megacrit.cardcrawl.vfx.AbstractGameEffect;
 import com.megacrit.cardcrawl.vfx.BobEffect;
@@ -37,7 +29,7 @@
 import java.util.Iterator;
 
 public class DiscardPilePanel
-extends AbstractPanel {
+        extends AbstractPanel {
     private static final TutorialStrings tutorialStrings = CardCrawlGame.languagePack.getTutorialString("Discard Tip");
     public static final String[] MSG = DiscardPilePanel.tutorialStrings.TEXT;
     public static final String[] LABEL = DiscardPilePanel.tutorialStrings.LABEL;
@@ -56,8 +48,8 @@
     private float glowAlpha = 0.0f;
     private GlyphLayout gl = new GlyphLayout();
     private BobEffect bob = new BobEffect(1.0f);
-    private ArrayList<DiscardGlowEffect> vfxAbove = new ArrayList();
-    private ArrayList<DiscardGlowEffect> vfxBelow = new ArrayList();
+    private ArrayList<DiscardGlowEffect> vfxAbove = new ArrayList<>();
+    private ArrayList<DiscardGlowEffect> vfxBelow = new ArrayList<>();
     private static final float DECK_TIP_X = 1550.0f * Settings.scale;
     private static final float DECK_TIP_Y = 470.0f * Settings.scale;
     private static final float HITBOX_W = 120.0f * Settings.scale;
@@ -79,9 +71,6 @@
             this.bannerHitbox.update();
             this.updatePop();
         }
-        if (!this.hitbox.justHovered || AbstractDungeon.screen == AbstractDungeon.CurrentScreen.NONE) {
-            // empty if block
-        }
         if (this.hitbox.hovered) {
             if (!AbstractDungeon.isScreenUp) {
                 AbstractDungeon.overlayMenu.hoveredTip = true;
@@ -90,13 +79,13 @@
                 AbstractDungeon.previousScreen = AbstractDungeon.isScreenUp ? AbstractDungeon.screen : null;
                 this.openDiscardPile();
             }
-        } else if (Gdx.input.isKeyJustPressed(47) && AbstractDungeon.getMonsters() != null && AbstractDungeon.screen != AbstractDungeon.CurrentScreen.DISCARD_VIEW && !AbstractDungeon.getMonsters().areMonstersDead() && AbstractDungeon.overlayMenu.combatPanelsShown) {
+        } else if (!DevConsole.visible &&Gdx.input.isKeyJustPressed(47) && AbstractDungeon.getMonsters() != null && AbstractDungeon.screen != AbstractDungeon.CurrentScreen.DISCARD_VIEW && !AbstractDungeon.getMonsters().areMonstersDead() && AbstractDungeon.overlayMenu.combatPanelsShown) {
             AbstractDungeon.previousScreen = AbstractDungeon.isScreenUp ? AbstractDungeon.screen : null;
             this.openDiscardPile();
             return;
         }
         if (AbstractDungeon.screen == AbstractDungeon.CurrentScreen.DISCARD_VIEW) {
-            if (this.bannerHitbox.hovered && InputHelper.justClickedLeft || Gdx.input.isKeyJustPressed(47)) {
+            if (this.bannerHitbox.hovered && InputHelper.justClickedLeft || (Gdx.input.isKeyJustPressed(47) && !DevConsole.visible)) {
                 this.hitbox.hovered = false;
                 this.bannerHitbox.hovered = false;
                 InputHelper.justClickedLeft = false;
@@ -198,4 +187,3 @@
         }
     }
 }
-
diff -ru ../../../_lib/decompiled/com/megacrit/cardcrawl/ui/panels/DrawPilePanel.java com/megacrit/cardcrawl/ui/panels/DrawPilePanel.java
--- ../../../_lib/decompiled/com/megacrit/cardcrawl/ui/panels/DrawPilePanel.java	2018-02-08 20:13:30.537973500 -0800
+++ com/megacrit/cardcrawl/ui/panels/DrawPilePanel.java	2018-02-08 20:22:04.040865300 -0800
@@ -3,21 +3,15 @@
  */
 package com.megacrit.cardcrawl.ui.panels;
 
+import basemod.DevConsole;
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.Graphics;
-import com.badlogic.gdx.Input;
 import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.GlyphLayout;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.math.MathUtils;
-import com.megacrit.cardcrawl.audio.SoundMaster;
 import com.megacrit.cardcrawl.cards.AbstractCard;
-import com.megacrit.cardcrawl.cards.CardGroup;
 import com.megacrit.cardcrawl.characters.AbstractPlayer;
 import com.megacrit.cardcrawl.core.CardCrawlGame;
-import com.megacrit.cardcrawl.core.OverlayMenu;
 import com.megacrit.cardcrawl.core.Settings;
 import com.megacrit.cardcrawl.dungeons.AbstractDungeon;
 import com.megacrit.cardcrawl.helpers.FontHelper;
@@ -26,11 +20,9 @@
 import com.megacrit.cardcrawl.helpers.InputHelper;
 import com.megacrit.cardcrawl.helpers.MathHelper;
 import com.megacrit.cardcrawl.helpers.TipHelper;
-import com.megacrit.cardcrawl.localization.LocalizedStrings;
 import com.megacrit.cardcrawl.localization.TutorialStrings;
 import com.megacrit.cardcrawl.localization.UIStrings;
 import com.megacrit.cardcrawl.relics.AbstractRelic;
-import com.megacrit.cardcrawl.screens.DrawPileViewScreen;
 import com.megacrit.cardcrawl.ui.panels.AbstractPanel;
 import com.megacrit.cardcrawl.vfx.AbstractGameEffect;
 import com.megacrit.cardcrawl.vfx.BobEffect;
@@ -40,7 +32,7 @@
 import java.util.Iterator;
 
 public class DrawPilePanel
-extends AbstractPanel {
+        extends AbstractPanel {
     private static final TutorialStrings tutorialStrings = CardCrawlGame.languagePack.getTutorialString("Draw Tip");
     public static final String[] MSG = DrawPilePanel.tutorialStrings.TEXT;
     public static final String[] LABEL = DrawPilePanel.tutorialStrings.LABEL;
@@ -61,7 +53,7 @@
     private static final float DECK_TIP_X = 50.0f * Settings.scale;
     private static final float DECK_TIP_Y = 470.0f * Settings.scale;
     private BobEffect bob = new BobEffect(1.0f);
-    private ArrayList<GameDeckGlowEffect> vfxBelow = new ArrayList();
+    private ArrayList<GameDeckGlowEffect> vfxBelow = new ArrayList<>();
     private static final float HITBOX_W = 120.0f * Settings.scale;
     private static final float HITBOX_W2 = 450.0f * Settings.scale;
     private Hitbox hitbox = new Hitbox(0.0f, 0.0f, HITBOX_W, HITBOX_W);
@@ -81,9 +73,6 @@
             this.bannerHitbox.update();
             this.updatePop();
         }
-        if (!this.hitbox.justHovered || AbstractDungeon.screen == AbstractDungeon.CurrentScreen.NONE) {
-            // empty if block
-        }
         if (this.hitbox.hovered) {
             if (!AbstractDungeon.isScreenUp) {
                 AbstractDungeon.overlayMenu.hoveredTip = true;
@@ -92,13 +81,13 @@
                 AbstractDungeon.previousScreen = AbstractDungeon.isScreenUp ? AbstractDungeon.screen : null;
                 this.openDrawPile();
             }
-        } else if (Gdx.input.isKeyJustPressed(29) && AbstractDungeon.getMonsters() != null && AbstractDungeon.screen != AbstractDungeon.CurrentScreen.GAME_DECK_VIEW && !AbstractDungeon.getMonsters().areMonstersDead() && AbstractDungeon.overlayMenu.combatPanelsShown) {
+        } else if (!DevConsole.visible && Gdx.input.isKeyJustPressed(29) && AbstractDungeon.getMonsters() != null && AbstractDungeon.screen != AbstractDungeon.CurrentScreen.GAME_DECK_VIEW && !AbstractDungeon.getMonsters().areMonstersDead() && AbstractDungeon.overlayMenu.combatPanelsShown) {
             AbstractDungeon.previousScreen = AbstractDungeon.isScreenUp ? AbstractDungeon.screen : null;
             this.openDrawPile();
             return;
         }
         if (AbstractDungeon.screen == AbstractDungeon.CurrentScreen.GAME_DECK_VIEW) {
-            if (this.bannerHitbox.hovered && InputHelper.justClickedLeft || Gdx.input.isKeyJustPressed(29)) {
+            if (this.bannerHitbox.hovered && InputHelper.justClickedLeft || (Gdx.input.isKeyJustPressed(29) && !DevConsole.visible)) {
                 this.hitbox.hovered = false;
                 this.bannerHitbox.hovered = false;
                 InputHelper.justClickedLeft = false;
@@ -201,4 +190,3 @@
         }
     }
 }
-
diff -ru ../../../_lib/decompiled/com/megacrit/cardcrawl/ui/panels/TopPanel.java com/megacrit/cardcrawl/ui/panels/TopPanel.java
--- ../../../_lib/decompiled/com/megacrit/cardcrawl/ui/panels/TopPanel.java	2018-02-08 20:13:30.672602800 -0800
+++ com/megacrit/cardcrawl/ui/panels/TopPanel.java	2018-02-15 22:34:41.815502100 -0800
@@ -3,6 +3,7 @@
  */
 package com.megacrit.cardcrawl.ui.panels;
 
+import basemod.DevConsole;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.Input;
@@ -54,6 +55,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+@SuppressWarnings("CodeBlock2Expr")
 public class TopPanel {
     private static final TutorialStrings tutorialStrings = CardCrawlGame.languagePack.getTutorialString("Top Panel Tips");
     public static final String[] MSG = TopPanel.tutorialStrings.TEXT;
@@ -114,6 +116,7 @@
     public Hitbox hpHb;
     public Hitbox ascensionHb = new Hitbox(300.0f * Settings.scale, ICON_W);
     public Hitbox[] potionHitboxes;
+    @SuppressWarnings("OptionalUsedAsFieldOrParameterType")
     public Optional<TwitchPanel> twitch;
     private static final Logger logger;
 
@@ -201,6 +204,7 @@
         this.goldHb.move(this.goldIconX + GOLD_TIP_W / 2.0f, ICON_Y + ICON_W / 2.0f);
     }
 
+    @SuppressWarnings("EmptyMethod")
     public void setDungeonName(String dungeonName) {
     }
 
@@ -384,7 +388,7 @@
             this.deckButtonDisabled = true;
             this.deckHb.hovered = false;
         }
-        if (this.deckHb.hovered && InputHelper.justClickedLeft || Gdx.input.isKeyJustPressed(32)) {
+        if (this.deckHb.hovered && InputHelper.justClickedLeft || Gdx.input.isKeyJustPressed(32) && !DevConsole.visible) {
             if (AbstractDungeon.screen == AbstractDungeon.CurrentScreen.COMBAT_REWARD) {
                 AbstractDungeon.closeCurrentScreen();
                 AbstractDungeon.deckViewScreen.open();
@@ -443,7 +447,7 @@
             this.mapButtonDisabled = true;
             this.mapHb.hovered = false;
         }
-        if (this.mapHb.hovered && InputHelper.justClickedLeft || Gdx.input.isKeyJustPressed(41)) {
+        if (this.mapHb.hovered && InputHelper.justClickedLeft || Gdx.input.isKeyJustPressed(41) && !DevConsole.visible) {
             if (AbstractDungeon.screen == AbstractDungeon.CurrentScreen.MAP && !AbstractDungeon.dungeonMapScreen.dismissable) {
                 CardCrawlGame.sound.play("CARD_REJECT");
             } else if (!AbstractDungeon.isScreenUp) {
@@ -524,8 +528,8 @@
             this.renderPotions(sb);
             this.potionUi.render(sb);
             this.twitch.ifPresent(twitchPanel -> {
-                twitchPanel.render(sb);
-            }
+                        twitchPanel.render(sb);
+                    }
             );
         }
     }
@@ -685,4 +689,3 @@
         logger = LogManager.getLogger(TopPanel.class.getName());
     }
 }
-
