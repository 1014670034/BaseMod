diff -ru ../../../_lib/decompiled/com/megacrit/cardcrawl/map/MapGenerator.java com/megacrit/cardcrawl/map/MapGenerator.java
--- ../../../_lib/decompiled/com/megacrit/cardcrawl/map/MapGenerator.java	2018-02-01 17:51:02.277229900 -0800
+++ com/megacrit/cardcrawl/map/MapGenerator.java	2018-02-01 19:41:09.591252000 -0800
@@ -3,28 +3,29 @@
  */
 package com.megacrit.cardcrawl.map;
 
-import com.megacrit.cardcrawl.map.EdgeComparator;
-import com.megacrit.cardcrawl.map.MapEdge;
-import com.megacrit.cardcrawl.map.MapRoomNode;
+import basemod.BaseMod;
 import com.megacrit.cardcrawl.random.Random;
-import java.util.ArrayList;
-import java.util.Collections;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import java.util.ArrayList;
+
 public class MapGenerator {
     private static final Logger logger = LogManager.getLogger(MapGenerator.class.getName());
 
     public static ArrayList<ArrayList<MapRoomNode>> generateDungeon(int height, int width, int pathDensity, Random rng) {
         ArrayList<ArrayList<MapRoomNode>> map = MapGenerator.createNodes(height, width);
-        map = MapGenerator.createPaths(map, pathDensity, rng);
+        
+        // BaseMod modification
+        map = MapGenerator.createPaths(map, (int)(pathDensity*BaseMod.mapPathDensityMultiplier), rng);
+        
         map = MapGenerator.filterRedundantEdgesFromRow(map);
         return map;
     }
 
     private static ArrayList<ArrayList<MapRoomNode>> filterRedundantEdgesFromRow(ArrayList<ArrayList<MapRoomNode>> map) {
-        ArrayList<MapEdge> existingEdges = new ArrayList<MapEdge>();
-        ArrayList<MapEdge> deleteList = new ArrayList<MapEdge>();
+        ArrayList<MapEdge> existingEdges = new ArrayList<>();
+        ArrayList<MapEdge> deleteList = new ArrayList<>();
         for (MapRoomNode node : map.get(0)) {
             if (!node.hasEdges()) continue;
             for (MapEdge edge : node.getEdges()) {
@@ -43,9 +44,9 @@
     }
 
     private static ArrayList<ArrayList<MapRoomNode>> createNodes(int height, int width) {
-        ArrayList<ArrayList<MapRoomNode>> nodes = new ArrayList<ArrayList<MapRoomNode>>();
+        ArrayList<ArrayList<MapRoomNode>> nodes = new ArrayList<>();
         for (int y = 0; y < height; ++y) {
-            ArrayList<MapRoomNode> row = new ArrayList<MapRoomNode>();
+            ArrayList<MapRoomNode> row = new ArrayList<>();
             for (int x = 0; x < width; ++x) {
                 row.add(new MapRoomNode(x, y));
             }
@@ -72,13 +73,13 @@
     }
 
     private static MapEdge getMaxEdge(ArrayList<MapEdge> edges) {
-        Collections.sort(edges, new EdgeComparator());
+        edges.sort(new EdgeComparator());
         assert (!edges.isEmpty());
         return edges.get(edges.size() - 1);
     }
 
     private static MapEdge getMinEdge(ArrayList<MapEdge> edges) {
-        Collections.sort(edges, new EdgeComparator());
+        edges.sort(new EdgeComparator());
         assert (!edges.isEmpty());
         return edges.get(0);
     }
@@ -126,15 +127,15 @@
     }
 
     private static ArrayList<ArrayList<MapRoomNode>> _createPaths(ArrayList<ArrayList<MapRoomNode>> nodes, MapEdge edge, Random rng) {
-        MapRoomNode left_node;
         int max;
         int min;
+        MapRoomNode left_node;
         MapRoomNode right_node;
         MapRoomNode currentNode = MapGenerator.getNode(edge.dstX, edge.dstY, nodes);
         if (edge.dstY + 1 >= nodes.size()) {
             MapEdge newEdge = new MapEdge(edge.dstX, edge.dstY, currentNode.offsetX, currentNode.offsetY, 3, edge.dstY + 2, 0.0f, 0.0f, true);
             currentNode.addEdge(newEdge);
-            Collections.sort(currentNode.getEdges(), new EdgeComparator());
+            currentNode.getEdges().sort(new EdgeComparator());
             return nodes;
         }
         int row_width = nodes.get(edge.dstY).size();
@@ -180,9 +181,7 @@
                         }
                     }
                     targetNodeCandidate = MapGenerator.getNode(newEdgeX, newEdgeY, nodes);
-                    continue;
                 }
-                if (ancestor_gap < max_ancestor_gap) continue;
             }
         }
         if (edge.dstX != 0 && (left_node = nodes.get(edge.dstY).get(edge.dstX - 1)).hasEdges()) {
@@ -200,7 +199,7 @@
         targetNodeCandidate = MapGenerator.getNode(newEdgeX, newEdgeY, nodes);
         MapEdge newEdge = new MapEdge(edge.dstX, edge.dstY, currentNode.offsetX, currentNode.offsetY, newEdgeX, newEdgeY, targetNodeCandidate.offsetX, targetNodeCandidate.offsetY, false);
         currentNode.addEdge(newEdge);
-        Collections.sort(currentNode.getEdges(), new EdgeComparator());
+        currentNode.getEdges().sort(new EdgeComparator());
         targetNodeCandidate.addParent(currentNode);
         return MapGenerator._createPaths(nodes, newEdge, rng);
     }
@@ -210,11 +209,11 @@
     }
 
     private static String paddingGenerator(int length) {
-        String str = "";
+        StringBuilder str = new StringBuilder();
         for (int i = 0; i < length; ++i) {
-            str = str + " ";
+            str.append(" ");
         }
-        return str;
+        return str.toString();
     }
 
     public static String toString(ArrayList<ArrayList<MapRoomNode>> nodes) {
@@ -222,10 +221,10 @@
     }
 
     public static String toString(ArrayList<ArrayList<MapRoomNode>> nodes, Boolean showRoomSymbols) {
-        String str = "";
+        StringBuilder str = new StringBuilder();
         int left_padding_size = 5;
         for (int row_num = nodes.size() - 1; row_num >= 0; --row_num) {
-            str = str + "\n " + MapGenerator.paddingGenerator(left_padding_size);
+            str.append("\n ").append(MapGenerator.paddingGenerator(left_padding_size));
             for (MapRoomNode node : nodes.get(row_num)) {
                 String right = " ";
                 Object mid = " ";
@@ -240,10 +239,10 @@
                     if (edge.dstX <= node.x) continue;
                     right = "/";
                 }
-                str = str + left + (String)mid + right;
+                str.append(left).append(mid).append(right);
             }
-            str = str + "\n" + row_num + " ";
-            str = str + MapGenerator.paddingGenerator(left_padding_size - String.valueOf(row_num).length());
+            str.append("\n").append(row_num).append(" ");
+            str.append(MapGenerator.paddingGenerator(left_padding_size - String.valueOf(row_num).length()));
             for (MapRoomNode node : nodes.get(row_num)) {
                 String node_symbol = " ";
                 if (row_num == nodes.size() - 1) {
@@ -256,10 +255,10 @@
                 } else if (node.hasEdges()) {
                     node_symbol = node.getRoomSymbol(showRoomSymbols);
                 }
-                str = str + " " + node_symbol + " ";
+                str.append(" ").append(node_symbol).append(" ");
             }
         }
-        return str;
+        return str.toString();
     }
 
     private static int randRange(Random rng, int min, int max) {
diff -ru ../../../_lib/decompiled/com/megacrit/cardcrawl/monsters/MonsterGroup.java com/megacrit/cardcrawl/monsters/MonsterGroup.java
--- ../../../_lib/decompiled/com/megacrit/cardcrawl/monsters/MonsterGroup.java	2018-02-01 17:51:02.474919900 -0800
+++ com/megacrit/cardcrawl/monsters/MonsterGroup.java	2018-02-01 19:41:09.598190400 -0800
@@ -3,6 +3,7 @@
  */
 package com.megacrit.cardcrawl.monsters;
 
+import basemod.BaseMod;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.math.MathUtils;
 import com.megacrit.cardcrawl.actions.AbstractGameAction;
@@ -123,7 +124,10 @@
                     TipTracker.neverShowAgain("INTENT_TIP");
                 }
             }
-            m.takeTurn();
+
+            if (BaseMod.publishPreMonsterTurn(m)) {
+                m.takeTurn();
+            }
         }
         if (!Settings.isDebug) {
             AbstractDungeon.actionManager.addToBottom(new WaitAction(1.5f));
@@ -286,4 +290,3 @@
         return arr;
     }
 }
-
diff -ru ../../../_lib/decompiled/com/megacrit/cardcrawl/powers/IntangiblePower.java com/megacrit/cardcrawl/powers/IntangiblePower.java
--- ../../../_lib/decompiled/com/megacrit/cardcrawl/powers/IntangiblePower.java	2018-02-01 17:51:03.636036000 -0800
+++ com/megacrit/cardcrawl/powers/IntangiblePower.java	2018-02-01 19:41:09.601493200 -0800
@@ -3,19 +3,15 @@
  */
 package com.megacrit.cardcrawl.powers;
 
-import com.badlogic.gdx.graphics.Texture;
-import com.megacrit.cardcrawl.actions.AbstractGameAction;
-import com.megacrit.cardcrawl.actions.GameActionManager;
 import com.megacrit.cardcrawl.actions.common.ReducePowerAction;
 import com.megacrit.cardcrawl.actions.common.RemoveSpecificPowerAction;
 import com.megacrit.cardcrawl.cards.DamageInfo;
+import com.megacrit.cardcrawl.characters.AbstractPlayer;
 import com.megacrit.cardcrawl.core.AbstractCreature;
 import com.megacrit.cardcrawl.core.CardCrawlGame;
 import com.megacrit.cardcrawl.dungeons.AbstractDungeon;
 import com.megacrit.cardcrawl.helpers.ImageMaster;
-import com.megacrit.cardcrawl.localization.LocalizedStrings;
 import com.megacrit.cardcrawl.localization.PowerStrings;
-import com.megacrit.cardcrawl.powers.AbstractPower;
 
 public class IntangiblePower
 extends AbstractPower {
@@ -36,6 +32,18 @@
         this.justApplied = true;
     }
 
+    // BaseMod modification
+    @Override
+    public void atEndOfRound() {
+        if (owner instanceof AbstractPlayer) {
+            AbstractDungeon.actionManager.addToBottom(new ReducePowerAction(owner, owner, "Intangible", 1));
+            
+            if (amount == 0) {
+                AbstractDungeon.actionManager.addToBottom(new RemoveSpecificPowerAction(owner, owner, "Intangible"));
+            }
+        }
+    }
+    
     @Override
     public float atDamageReceive(float damage, DamageInfo.DamageType type) {
         if (damage > 0.0f) {
diff -ru ../../../_lib/decompiled/com/megacrit/cardcrawl/ui/buttons/CancelButton.java com/megacrit/cardcrawl/ui/buttons/CancelButton.java
--- ../../../_lib/decompiled/com/megacrit/cardcrawl/ui/buttons/CancelButton.java	2018-02-01 17:51:06.244542000 -0800
+++ com/megacrit/cardcrawl/ui/buttons/CancelButton.java	2018-02-01 19:41:09.604430000 -0800
@@ -3,14 +3,11 @@
  */
 package com.megacrit.cardcrawl.ui.buttons;
 
+import basemod.BaseMod;
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.math.MathUtils;
-import com.megacrit.cardcrawl.audio.SoundMaster;
 import com.megacrit.cardcrawl.core.CardCrawlGame;
 import com.megacrit.cardcrawl.core.Settings;
 import com.megacrit.cardcrawl.dungeons.AbstractDungeon;
@@ -18,16 +15,10 @@
 import com.megacrit.cardcrawl.helpers.Hitbox;
 import com.megacrit.cardcrawl.helpers.ImageMaster;
 import com.megacrit.cardcrawl.helpers.InputHelper;
-import com.megacrit.cardcrawl.localization.LocalizedStrings;
 import com.megacrit.cardcrawl.localization.UIStrings;
-import com.megacrit.cardcrawl.rewards.chests.AbstractChest;
-import com.megacrit.cardcrawl.rooms.CampfireUI;
 import com.megacrit.cardcrawl.rooms.RestRoom;
 import com.megacrit.cardcrawl.rooms.TreasureRoomBoss;
 import com.megacrit.cardcrawl.screens.mainMenu.MainMenuScreen;
-import com.megacrit.cardcrawl.screens.select.GridCardSelectScreen;
-import com.megacrit.cardcrawl.screens.stats.StatsScreen;
-import com.megacrit.cardcrawl.screens.trial.TrialScreen;
 
 public class CancelButton {
     private static final UIStrings uiStrings = CardCrawlGame.languagePack.getUIString("Cancel Button");
@@ -95,6 +86,14 @@
                         this.hide();
                         return;
                     }
+                    
+                    // BaseMod modification
+                    if (BaseMod.modSettingsUp) {
+                        BaseMod.modSettingsUp = false;
+                        hide();
+                        return;
+                    }
+                    
                     if (this.buttonText.equals(TEXT[0])) {
                         return;
                     }
diff -ru ../../../_lib/decompiled/com/megacrit/cardcrawl/ui/buttons/EndTurnButton.java com/megacrit/cardcrawl/ui/buttons/EndTurnButton.java
--- ../../../_lib/decompiled/com/megacrit/cardcrawl/ui/buttons/EndTurnButton.java	2018-02-01 17:51:06.300595900 -0800
+++ com/megacrit/cardcrawl/ui/buttons/EndTurnButton.java	2018-02-01 19:41:09.607442700 -0800
@@ -3,32 +3,22 @@
  */
 package com.megacrit.cardcrawl.ui.buttons;
 
+import basemod.DevConsole;
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.Graphics;
-import com.badlogic.gdx.Input;
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.math.MathUtils;
-import com.megacrit.cardcrawl.audio.SoundMaster;
 import com.megacrit.cardcrawl.cards.AbstractCard;
-import com.megacrit.cardcrawl.cards.CardGroup;
-import com.megacrit.cardcrawl.characters.AbstractPlayer;
 import com.megacrit.cardcrawl.core.CardCrawlGame;
 import com.megacrit.cardcrawl.core.Settings;
 import com.megacrit.cardcrawl.dungeons.AbstractDungeon;
-import com.megacrit.cardcrawl.helpers.FontHelper;
-import com.megacrit.cardcrawl.helpers.Hitbox;
-import com.megacrit.cardcrawl.helpers.ImageMaster;
-import com.megacrit.cardcrawl.helpers.InputHelper;
-import com.megacrit.cardcrawl.helpers.ShaderHelper;
-import com.megacrit.cardcrawl.helpers.TipHelper;
-import com.megacrit.cardcrawl.localization.LocalizedStrings;
+import com.megacrit.cardcrawl.helpers.*;
 import com.megacrit.cardcrawl.localization.TutorialStrings;
 import com.megacrit.cardcrawl.localization.UIStrings;
 import com.megacrit.cardcrawl.vfx.AbstractGameEffect;
 import com.megacrit.cardcrawl.vfx.EndTurnGlowEffect;
+
 import java.util.ArrayList;
 import java.util.Iterator;
 
@@ -51,8 +41,7 @@
     private boolean isHidden = true;
     public boolean enabled = false;
     private boolean isDisabled = false;
-    private Color textColor;
-    private ArrayList<EndTurnGlowEffect> glowList = new ArrayList();
+    private ArrayList<EndTurnGlowEffect> glowList = new ArrayList<>();
     private static final float GLOW_INTERVAL = 1.2f;
     private float glowTimer = 0.0f;
     public boolean isGlowing = false;
@@ -69,10 +58,7 @@
         }
         this.hitbox.move(this.current_x, this.current_y);
         if (this.enabled) {
-            this.isDisabled = false;
-            if (AbstractDungeon.isScreenUp || AbstractDungeon.player.isDraggingCard || AbstractDungeon.player.inSingleTargetMode) {
-                this.isDisabled = true;
-            }
+            this.isDisabled = AbstractDungeon.isScreenUp || AbstractDungeon.player.isDraggingCard || AbstractDungeon.player.inSingleTargetMode;
             if (AbstractDungeon.player.hoveredCard == null) {
                 this.hitbox.update();
             }
@@ -91,7 +77,9 @@
                 }
             }
         }
-        if (this.hitbox.clicked || Gdx.input.isKeyJustPressed(33) && !this.isDisabled && this.enabled) {
+        
+        // BaseMod modification
+        if (this.hitbox.clicked || (!DevConsole.visible && Gdx.input.isKeyJustPressed(33)) && !this.isDisabled && this.enabled) {
             this.hitbox.clicked = false;
             if (!this.isDisabled && !AbstractDungeon.isScreenUp) {
                 this.disable(true);
@@ -177,10 +165,11 @@
     public void render(SpriteBatch sb) {
         if (!Settings.hideEndTurn) {
             float tmpY = this.current_y;
+            Color textColor;
             if (this.isDisabled || !this.enabled) {
-                this.textColor = this.label.equals(ENEMY_TURN_MSG) ? Settings.CREAM_COLOR : Color.LIGHT_GRAY;
+                textColor = this.label.equals(ENEMY_TURN_MSG) ? Settings.CREAM_COLOR : Color.LIGHT_GRAY;
             } else {
-                this.textColor = this.hitbox.hovered ? (this.isWarning ? Settings.RED_TEXT_COLOR : Color.CYAN) : (this.isGlowing ? Settings.GOLD_COLOR : Settings.CREAM_COLOR);
+                textColor = this.hitbox.hovered ? (this.isWarning ? Settings.RED_TEXT_COLOR : Color.CYAN) : (this.isGlowing ? Settings.GOLD_COLOR : Settings.CREAM_COLOR);
                 if (Settings.COMMON_TIP && this.hitbox.hovered && !AbstractDungeon.isScreenUp) {
                     TipHelper.renderGenericTip(this.current_x - 90.0f * Settings.scale, this.current_y + 300.0f * Settings.scale, LABEL[0] + " (E)", MSG[0] + AbstractDungeon.player.gameHandSize + MSG[1]);
                 }
@@ -214,7 +203,7 @@
                 sb.draw(buttonImg, this.current_x - 128.0f, tmpY - 128.0f, 128.0f, 128.0f, 256.0f, 256.0f, Settings.scale, Settings.scale, 0.0f, 0, 0, 256, 256, false, false);
                 sb.setBlendFunction(770, 771);
             }
-            FontHelper.renderFontCentered(sb, FontHelper.panelEndTurnFont, this.label, this.current_x - 0.0f * Settings.scale, tmpY - 3.0f * Settings.scale, this.textColor);
+            FontHelper.renderFontCentered(sb, FontHelper.panelEndTurnFont, this.label, this.current_x - 0.0f * Settings.scale, tmpY - 3.0f * Settings.scale, textColor);
             if (!this.isHidden) {
                 this.hitbox.render(sb);
             }
diff -ru ../../../_lib/decompiled/com/megacrit/cardcrawl/ui/campfire/AbstractCampfireOption.java com/megacrit/cardcrawl/ui/campfire/AbstractCampfireOption.java
--- ../../../_lib/decompiled/com/megacrit/cardcrawl/ui/campfire/AbstractCampfireOption.java	2018-02-01 17:51:06.381173400 -0800
+++ com/megacrit/cardcrawl/ui/campfire/AbstractCampfireOption.java	2018-02-01 19:41:09.610435700 -0800
@@ -3,11 +3,10 @@
  */
 package com.megacrit.cardcrawl.ui.campfire;
 
+import basemod.BaseMod;
 import com.badlogic.gdx.graphics.Color;
 import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.SpriteBatch;
-import com.megacrit.cardcrawl.audio.SoundMaster;
 import com.megacrit.cardcrawl.core.CardCrawlGame;
 import com.megacrit.cardcrawl.core.Settings;
 import com.megacrit.cardcrawl.dungeons.AbstractDungeon;
@@ -15,7 +14,6 @@
 import com.megacrit.cardcrawl.helpers.Hitbox;
 import com.megacrit.cardcrawl.helpers.InputHelper;
 import com.megacrit.cardcrawl.helpers.MathHelper;
-import com.megacrit.cardcrawl.rooms.CampfireUI;
 import com.megacrit.cardcrawl.rooms.RestRoom;
 
 public abstract class AbstractCampfireOption {
@@ -58,7 +56,11 @@
         if (this.hb.clicked) {
             this.hb.clicked = false;
             this.useOption();
-            ((RestRoom)AbstractDungeon.getCurrRoom()).campfireUI.somethingSelected = true;
+            
+            // BaseMod modification
+            if (BaseMod.publishPostCampfire()) {
+                ((RestRoom)AbstractDungeon.getCurrRoom()).campfireUI.somethingSelected = true;
+            }
         }
     }
 
diff -ru ../../../_lib/decompiled/com/megacrit/cardcrawl/ui/panels/DiscardPilePanel.java com/megacrit/cardcrawl/ui/panels/DiscardPilePanel.java
--- ../../../_lib/decompiled/com/megacrit/cardcrawl/ui/panels/DiscardPilePanel.java	2018-02-01 17:51:06.437727200 -0800
+++ com/megacrit/cardcrawl/ui/panels/DiscardPilePanel.java	2018-02-01 19:41:09.613438900 -0800
@@ -3,6 +3,7 @@
  */
 package com.megacrit.cardcrawl.ui.panels;
 
+import basemod.DevConsole;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.Input;
@@ -37,7 +38,7 @@
 import java.util.Iterator;
 
 public class DiscardPilePanel
-extends AbstractPanel {
+        extends AbstractPanel {
     private static final TutorialStrings tutorialStrings = CardCrawlGame.languagePack.getTutorialString("Discard Tip");
     public static final String[] MSG = DiscardPilePanel.tutorialStrings.TEXT;
     public static final String[] LABEL = DiscardPilePanel.tutorialStrings.LABEL;
@@ -90,13 +91,13 @@
                 AbstractDungeon.previousScreen = AbstractDungeon.isScreenUp ? AbstractDungeon.screen : null;
                 this.openDiscardPile();
             }
-        } else if (Gdx.input.isKeyJustPressed(47) && AbstractDungeon.getMonsters() != null && AbstractDungeon.screen != AbstractDungeon.CurrentScreen.DISCARD_VIEW && !AbstractDungeon.getMonsters().areMonstersDead() && AbstractDungeon.overlayMenu.combatPanelsShown) {
+        } else if (!DevConsole.visible &&Gdx.input.isKeyJustPressed(47) && AbstractDungeon.getMonsters() != null && AbstractDungeon.screen != AbstractDungeon.CurrentScreen.DISCARD_VIEW && !AbstractDungeon.getMonsters().areMonstersDead() && AbstractDungeon.overlayMenu.combatPanelsShown) {
             AbstractDungeon.previousScreen = AbstractDungeon.isScreenUp ? AbstractDungeon.screen : null;
             this.openDiscardPile();
             return;
         }
         if (AbstractDungeon.screen == AbstractDungeon.CurrentScreen.DISCARD_VIEW) {
-            if (this.bannerHitbox.hovered && InputHelper.justClickedLeft || Gdx.input.isKeyJustPressed(47)) {
+            if (this.bannerHitbox.hovered && InputHelper.justClickedLeft || (Gdx.input.isKeyJustPressed(47) && !DevConsole.visible)) {
                 this.hitbox.hovered = false;
                 this.bannerHitbox.hovered = false;
                 InputHelper.justClickedLeft = false;
@@ -198,4 +199,3 @@
         }
     }
 }
-
diff -ru ../../../_lib/decompiled/com/megacrit/cardcrawl/ui/panels/DrawPilePanel.java com/megacrit/cardcrawl/ui/panels/DrawPilePanel.java
--- ../../../_lib/decompiled/com/megacrit/cardcrawl/ui/panels/DrawPilePanel.java	2018-02-01 17:51:06.451740600 -0800
+++ com/megacrit/cardcrawl/ui/panels/DrawPilePanel.java	2018-02-01 19:41:09.616356700 -0800
@@ -3,6 +3,7 @@
  */
 package com.megacrit.cardcrawl.ui.panels;
 
+import basemod.DevConsole;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.Input;
@@ -40,7 +41,7 @@
 import java.util.Iterator;
 
 public class DrawPilePanel
-extends AbstractPanel {
+        extends AbstractPanel {
     private static final TutorialStrings tutorialStrings = CardCrawlGame.languagePack.getTutorialString("Draw Tip");
     public static final String[] MSG = DrawPilePanel.tutorialStrings.TEXT;
     public static final String[] LABEL = DrawPilePanel.tutorialStrings.LABEL;
@@ -92,13 +93,13 @@
                 AbstractDungeon.previousScreen = AbstractDungeon.isScreenUp ? AbstractDungeon.screen : null;
                 this.openDrawPile();
             }
-        } else if (Gdx.input.isKeyJustPressed(29) && AbstractDungeon.getMonsters() != null && AbstractDungeon.screen != AbstractDungeon.CurrentScreen.GAME_DECK_VIEW && !AbstractDungeon.getMonsters().areMonstersDead() && AbstractDungeon.overlayMenu.combatPanelsShown) {
+        } else if (!DevConsole.visible && Gdx.input.isKeyJustPressed(29) && AbstractDungeon.getMonsters() != null && AbstractDungeon.screen != AbstractDungeon.CurrentScreen.GAME_DECK_VIEW && !AbstractDungeon.getMonsters().areMonstersDead() && AbstractDungeon.overlayMenu.combatPanelsShown) {
             AbstractDungeon.previousScreen = AbstractDungeon.isScreenUp ? AbstractDungeon.screen : null;
             this.openDrawPile();
             return;
         }
         if (AbstractDungeon.screen == AbstractDungeon.CurrentScreen.GAME_DECK_VIEW) {
-            if (this.bannerHitbox.hovered && InputHelper.justClickedLeft || Gdx.input.isKeyJustPressed(29)) {
+            if (this.bannerHitbox.hovered && InputHelper.justClickedLeft || (Gdx.input.isKeyJustPressed(29) && !DevConsole.visible)) {
                 this.hitbox.hovered = false;
                 this.bannerHitbox.hovered = false;
                 InputHelper.justClickedLeft = false;
@@ -201,4 +202,3 @@
         }
     }
 }
-
diff -ru ../../../_lib/decompiled/com/megacrit/cardcrawl/ui/panels/TopPanel.java com/megacrit/cardcrawl/ui/panels/TopPanel.java
--- ../../../_lib/decompiled/com/megacrit/cardcrawl/ui/panels/TopPanel.java	2018-02-01 17:51:06.552337600 -0800
+++ com/megacrit/cardcrawl/ui/panels/TopPanel.java	2018-02-01 19:41:09.627316500 -0800
@@ -3,6 +3,7 @@
  */
 package com.megacrit.cardcrawl.ui.panels;
 
+import basemod.DevConsole;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Graphics;
 import com.badlogic.gdx.Input;
@@ -354,7 +355,7 @@
             this.deckButtonDisabled = true;
             this.deckHb.hovered = false;
         }
-        if (this.deckHb.hovered && InputHelper.justClickedLeft || Gdx.input.isKeyJustPressed(32)) {
+        if (this.deckHb.hovered && InputHelper.justClickedLeft || (Gdx.input.isKeyJustPressed(32) && !DevConsole.visible)) {
             if (AbstractDungeon.screen == AbstractDungeon.CurrentScreen.COMBAT_REWARD) {
                 AbstractDungeon.closeCurrentScreen();
                 AbstractDungeon.deckViewScreen.open();
@@ -413,7 +414,7 @@
             this.mapButtonDisabled = true;
             this.mapHb.hovered = false;
         }
-        if (this.mapHb.hovered && InputHelper.justClickedLeft || Gdx.input.isKeyJustPressed(41)) {
+        if (this.mapHb.hovered && InputHelper.justClickedLeft || (Gdx.input.isKeyJustPressed(41) && !DevConsole.visible)) {
             if (AbstractDungeon.screen == AbstractDungeon.CurrentScreen.MAP && !AbstractDungeon.dungeonMapScreen.dismissable) {
                 CardCrawlGame.sound.play("CARD_REJECT");
             } else if (!AbstractDungeon.isScreenUp) {
